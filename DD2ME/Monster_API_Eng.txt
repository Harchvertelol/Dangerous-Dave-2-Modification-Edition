1. A little bit about monsters
Monsters are contained either in the modpack in the Monsters folder, or in a separate pack of monsters.
The modpack contains all packs, separate packs can be connected, replacing only some
specific details in modpacks. For example, connect other monsters, bonuses, levels.
While we will deal only with monsters. In the future, I will not stipulate that
monsters are stored in the Monsters folder of the modpack or in a separate pack, but I'll just say
that monsters are stored in a separate Monsters folder. The file structure will be described by
with comments from C ++.
So, the Monsters.dat file is stored in the Monsters folder, its structure:
---
[info]
numberofmonsters=11		// The number of monsters in the modpack

[draw]
transparentmaskR=204		// Transparency mask RED
transparentmaskG=255		// GREEN transparency mask
transparentmaskB=204		// transparency mask BLUE
highlightingonhit=0;0;255;255 // Highlight this monster on hit (RGBA)
timehighlightingonhit=1200 // Time to highlight this monster on hit
highlightingonhitmode=fill // Backlight type: fill fills completely, multiply multiplies the color by the specified
---

Monsters are numbered from 1 to numberofmonsters inclusive. Mask of transparency - that color
in textures, which is considered transparent and is cut out when rendering. Every monster
stored in a folder with its number. Consider the structure of this folder in sequence.
We will consider the example of the first monster (zombie) from the StandardDave modpack. room
monster - 1, its folder, respectively, "Monsters / 1".
In the folder there is a file monster.info, its structure:
---
/ * In the [info] block, all the "states" of the monster are described. State is a string.
Each state has its own monster texture. Each state also has frames.
animations. The state is entered by introducing the variable "numberofframes [NAMEOFSTATE]=[NUMBEROFFRAMEOFTHISSTATE]"
For example: "numberofframesdownrun=2" means that we have a state of "downrun" that has
two animation frames. Status textures should be in the folder of this monster, and have names
like this: "NAMEOFSTATE_ [NUMBEROFFRAME] .bmp." For example, the state "downrun" has
two textures: "downrun_1.bmp" and "downrun_2.bmp". If at least some texture is not, there will be
an error that will lead to the closure of the game. Also currently in the folder is a file
main.bmp - why is it, I don’t know, it arose when extracting resources from the original game, therefore
I left him for now. The texture structure is currently taken, again, from resource extraction
from the game, and it is as follows: the texture is a rectangle divided exactly in half,
on the left side there is a monster, and on the right side it is a collision rectangle, the color of which is only such,
which monsters have in the StandardDave modpack is unprofitable in size, which will
occupy modpacks, but, again, taken from extracting textures from the original game. In the future, just
will be changed to the coordinates of the collision rectangle in monster.info. * /
[info]
numberofframesdownrun=2		// The number of animation frames of the corresponding state
numberofframesleftrun=4		// The number of animation frames of the corresponding state
numberofframesleftstrike=3		// The number of animation frames of the corresponding state
numberofframesrightrun=4		// The number of animation frames of the corresponding state
numberofframesrightstrike=3		// The number of animation frames of the corresponding state

[other]
numberofframesdeathtiles=5		// The number of frames of the losing tiles. They are stored in a folder.
					// DeathTiles with names of the form "[NUMBER] .bmp", numbered from
					// units up to this value inclusive.
outputshiftX=0		// How much to move the monster along the X axis when placing it in the level. The fact,
			// that the zombie is too high, on the levels it is located on the second tile from the floor,
			// and if you leave it like that, without shifts, then the legs will be in the floor. Therefore we him
			// when outputting, we shift so that it lands exactly on the floor (along the Y axis).
outputshiftY=-8		// Here we move the monster along the Y axis.
animationstep=6		// This variable is used for animation speed in intelligence
highlightingonhit=0;0;255;255 // Highlight this monster on hit (takes precedence over general parameters, RGBA).
timehighlightingonhit=1200 // Time to highlight this monster on hit (takes precedence over general parameters).
highlightingonhitmode=fill // Backlight type: fill fills completely, multiply multiplies the color by the specified (takes precedence over general parameters).

[options]
lives=2		// The number of monster lives. If -1, then he has infinite lives, hits in him are taken into account (bullet stop).
		// If -2, then he has infinitely lives, and hits in him are not taken into account (a bullet flies through him).
speed1=11		// Variable to be used in intelligence
speed2=6		// Variable to be used in intelligence
speed3=8		// Variable to be used in intelligence
speed4=5		// Variable to be used in intelligence
downlook=5		// Variable to be used in intelligence
type=standard		// Monster type, standard or boss. When killing the last boss on a level, happens
			// automatic transition to the next level.
---

2. Intelligence of monsters.
Monster intelligence is described in the monster folder in the intellect.lua file in lua. We will be at the same time
consider the zombie intelligence example.
The following functions must be described:
1) setFirstState (), returns the state that is assigned to the monster when it is loaded:
function setFirstState ()
	return "rightrun"
end
Attention! If you are going to do any operations in this function, then keep in mind that at the time of calling the function, the monster
status NOT INSTALLED! So if you want to do something in a stateful manner, set it by calling setState (-1, STATE).
This does not negate the need to return a state that should eventually be set!
2) mainFunc (), returns nothing, is the main intelligence function, each rendering cycle is called if
if you don’t describe it, then it will be generated automatically, but empty. The render loop is called once every milliseconds,
specified in DD2.ini in the [video] block in the drawstep variable.
The following functions can be described, but not necessarily:
1) onDamage (damage), called when the monster receives damage, takes the amount of damage received.
2) onKill (type), called upon the death of a monster, accepts the type of death of the monster. IMPORTANT: no matter what you do in
of this function, the monster will be deleted. You can create a copy of it to continue its existence. But you can in function
onDamage (dmg) check the number of his lives, and change it if you want not to kill the monster.
3) getAPIVersion (), returns the API version for which the script code is written. You need to return a number.
function getAPIVersion ()
	return 0.1
end

Now we turn to the description of the intellect itself. Before describing the API, I will say a few words about animation.
All animations are switched in the intelligence file. To do this, there is a function to switch to the next frame and
additional counter. This is how zombie animation is implemented:
nextAdditionalNumberOfAction (-1)	- Increased the additional counter. Generally speaking, this could be realized through
					are global variables, but I made it simpler, since this construction is necessary
					- for almost every monster
if getAdditionalNumberOfAction (-1)% getMonsterOption (-1, "other", "animationstep") == 0 then - checked that it was time to switch the animation
	nextNumberOfAction (-1) - switched
else
	return - if there is no need to switch, then the zombie does nothing
end

Well, I think that's all for now, now just describe the API.

setState (id, state) - Set a new state
	id - monster id, if -1, then the current monster
	state - the new state of the monster
	Example: setState (-1, "downrun")

getState (id) - Get the current state
	id - monster id, if -1, then the current monster
	Returns the current state of the monster
	Example: statemonster = getState (-1)

goLeft (id, move, isCorrect, isCorrectStand = 0, isOnCeil = 0) - Move the monster to the left (decrease X)
	id - monster id, if -1, then the current monster
	move - the number of pixels the monster moves
	isCorrect - Do physics corrections (collisions with solid tiles)
	isCorrectStand - Whether to correct the monster as "standing" on its feet. Those. if in that direction the end of the "floor"
			then the monster will not go through the void. The default is false (i.e. 0 by lua).
	isOnCeil - Whether we are on the ceiling (inverting the definition of "gender") only works with isCorrectStand == 1. The default is 0.
	Returns 0 if physics correction has not been performed, and 1 if it has been performed.
	Examples: goLeft (-1, 2) - shifted to the left by 2 pixels, not paying attention to anything.
		goLeft (-1, 2, 1) - shifted to the left by 2 pixels, not allowing to pass through solid tiles.
		goLeft (-1, 3, 1, 1) - shifted to the left by 3 pixels, not allowing to pass through solid tiles, as well as move around the void.
		goLeft (-1, 4, 1, 1, 1) - shifted to the left by 4 pixels, not allowing them to pass through solid tiles, move around emptiness, considering
					that we walk on the ceiling (for example, relevant for the slug and spider from the second level of the original Dave).

goRight (id, move, isCorrect, isCorrectStand = 0, isOnCeil = 0) - Move the monster to the right (increase X)
	id - monster id, if -1, then the current monster
	move - the number of pixels the monster moves
	isCorrect - Do physics corrections (collisions with solid tiles)
	isCorrectStand - Whether to correct the monster as "standing" on its feet. Those. if in that direction the end of the "floor"
			then the monster will not go through the void. The default is false (i.e. 0 by lua).
	isOnCeil - Whether we are on the ceiling (inverting the definition of "gender") only works with isCorrectStand == 1. The default is 0.
	Returns 0 if physics correction has not been performed, and 1 if it has been performed.
	Examples: goRight (-1, 2) - shifted to the right by 2 pixels, not paying attention to anything.
		goRight (-1, 2, 1) - shifted to the right by 2 pixels, not allowing to pass through solid tiles.
		goRight (-1, 3, 1, 1) - shifted to the right by 3 pixels, not allowing to pass through solid tiles, as well as move around the void.
		goRight (-1, 4, 1, 1, 1) - shifted to the right by 4 pixels, not allowing to pass through solid tiles, move around the void, considering
					that we walk on the ceiling (for example, relevant for the slug and spider from the second level of the original Dave).

goUp (id, move, isCorrect) - Move the monster up (decrease Y)
	id - monster id, if -1, then the current monster
	move - the number of pixels the monster moves
	isCorrect - Do physics corrections (collisions with solid tiles)
	Returns 0 if physics correction has not been performed, and 1 if it has been performed.
	Examples: goUp (-1, 2) - moved up 2 pixels, not paying attention to anything.
		goUp (-1, 2, 1) - shifted up 2 pixels, not allowing to pass through solid tiles.

goDown (id, move, isCorrect, ladder = 0) - Move the monster down (increase Y)
	id - monster id, if -1, then the current monster
	move - the number of pixels the monster moves
	isCorrect - Do physics corrections (collisions with solid tiles)
	ladder - Are "ladders" (well, and "shelves", etc.) considered to be a solid object.
	Returns 0 if physics correction has not been performed, and 1 if it has been performed.
	Examples: goDown (-1, 2) - shifted down 2 pixels, not paying attention to anything.
		goDown (-1, 2, 1) - moved down by 2 pixels, not allowing to pass through solid tiles.

Animation counter toggles the animation of the monster.

setNumberOfAction (id, numbofact) - set the animation counter. Only works with the value from DD2.ini [video]: animationstep == true
	id - monster id, if -1, then the current monster
	numbofact - settable counter number
	Example: setNumberOfAction (12) - set the counter == 12.

nextNumberOfAction (id) - switches the animation to the next frame. Only works with the value from DD2.ini [video]: animationstep == true
	id - monster id, if -1, then the current monster
	Example: nextNumberOfAction (-1) - switched the animation.

setNullNumberOfAction (id) - Zero the animation counter. Only works with the value from DD2.ini [video]: animationstep == true
	id - monster id, if -1, then the current monster
	Example: setNullNumberOfAction (-1) - zeroed.

getNumberOfAction (id) - Get the animation counter.
	id - monster id, if -1, then the current monster
	Returns the current animation counter.
	Example: getNumberOfAction (-1) - received.

An additional animation counter is given as an auxiliary counter and does nothing.

setAdditionalNumberOfAction (id, numbofact) - set an additional animation counter. Only works with the value from DD2.ini [video]: animationstep == true
	id - monster id, if -1, then the current monster
	numbofact - settable counter number
	Example: setAdditionalNumberOfAction (12) - set an additional counter == 12.

nextAdditionalNumberOfAction (id) - switches the additional animation counter to the next frame. Only works with the value from DD2.ini [video]: animationstep == true
	id - monster id, if -1, then the current monster
	Example: nextAdditionalNumberOfAction (-1) - switched an additional animation counter.

setNullAdditionalNumberOfAction (id) - Zero the additional animation counter. Only works with the value from DD2.ini [video]: animationstep == true
	id - monster id, if -1, then the current monster
	Example: setNullAdditionalNumberOfAction (-1) - zeroed.

getAdditionalNumberOfAction (id) - Get an additional animation counter.
	id - monster id, if -1, then the current monster
	Returns the current additional animation counter.
	Example: getAdditionalNumberOfAction (-1) - received.

getMonsterOption (id, block, variable) - get the value from monster.info.
	id - monster id, if -1, then the current monster
	block - the name of the block, from where we get the value
	variable - the name of the variable whose value we want to know
	Returns the value of the variable [block]: variable from monster.info
	Example: getMonsterOption (-1, "other", "animationstep") - got a variable called "animationstep" from the "other" block.

getMainValue (block, variable) - get the value from DD2.ini.
	block - the name of the block, from where we get the value
	variable - the name of the variable whose value we want to know
	Returns the value of the variable [block]: variable from DD2.ini
	Example: getMainValue ("video", "drawstep") - got a variable called "drawstep" from the "video" block.

testLookPlayerX (id) - checks if a monster sees a deiva on the X axis (some part of the collision rectangle)
        id - monster id, if -1, then the current monster
        Returns 0 if it does not see, -1 if it sees to the left, 1 if it is to the right.
        Example: testlook = testLookPlayerX (-1) - checked.
		 testlook = math.abs (testLookPlayerX (-1)) - checked without regard to the sign.

testLookPlayerY (id) - checks if the monster sees a deiva along the Y axis (some part of the collision rectangle)
        id - monster id, if -1, then the current monster
        Returns 0 if it does not see, -1 if it sees above, 1 if it is lower.
        Example: testlook = testLookPlayerY (-1) - checked.
		 testlook = math.abs (testLookPlayerY (-1)) - checked without regard to the sign.

getMonsterFrame (id) - get the current frame of the monster animation.
	id - monster id, if -1, then the current monster
	Returns the current frame of the monster animation.
	Example: frame = getMonsterFrame (-1) - received

getDistanceToPlayerX (id, isWithSign = 0) - get the distance to player along the X axis. Returns the distance between the nearest points of the collision rectangles.
	id - monster id, if -1, then the current monster
	isWithSign - whether to return with a sign. The default is 0.
	Returns the distance to player along the X axis.
	Example: dist = getDistanceToPlayerX (-1, 1) - got the distance to player with a sign.

getDistanceToPlayerY (id, isWithSign = 0) - get the distance to player along the Y axis. Returns the distance between the nearest points of the collision rectangles.
	id - monster id, if -1, then the current monster
	isWithSign - whether to return with a sign. The default is 0.
	Returns the distance to player along the y axis.
	Example: dist = getDistanceToPlayerX (-1, 1) - got the distance to player with a sign.

getDistanceToPlayer (id) - get the distance to player. Returns the shortest distance between the vertices of the collision rectangles.
	id - monster id, if -1, then the current monster
	Returns the distance to player along the y axis.
	Example: getDistanceToPlayer (-1) - received

ATTENTION! ALL FUNCTIONS ON THE TILE TEST IS RAW AND WORK UNSTABLE, THEY WILL BE RENEWED!

testTileTypeDown (id, tiletype, typetest, numberoflabel = 0) - check tiles located in a certain layer on the monster.
	id - monster id, if -1, then the current monster
	tiletype - type of tile to check, existing types:
		EMPTY - empty tile (transparent),
		IMPASSABLE - hard tile,
		LADDER - stairs,
		DEATH - killing tile,
		EXITLEVEL - exit from the level.
	typetest - type of test. 0 - whether all tiles are of type tiletype in this layer. 1 - is there at least one tiletype tile in this layer.
	numberoflabel - layer number on the monster. The default value is 0. This is the layer with which the monster intersects at the very bottom, or if it is "standing", then "under the legs" of the monster.
			If "+1", this is the layer shift "down" (Y + 1), if "-1", then this is the layer shift "up". The layers are horizontal.
	Example: testTileTypeDown (-1, "EMPTY", 0) - checked

testTileTypeRight (id, tiletype, typetest, numberoflabel = 0) - check tiles that are in some layer on the monster.
	id - monster id, if -1, then the current monster
	tiletype - type of tile to check, existing types:
		EMPTY - empty tile (transparent),
		IMPASSABLE - hard tile,
		LADDER - stairs,
		DEATH - killing tile,
		EXITLEVEL - exit from the level.
	typetest - type of test. 0 - whether all tiles are of type tiletype in this layer. 1 - is there at least one tiletype tile in this layer.
	numberoflabel - layer number on the monster. The default is 0. This is the layer with which the monster intersects on the right (the farthest), or if it "stands sideways on the wall",
			then the "this side layer" of the monster. If "+1", this is the layer shift to the "right" (X + 1), if "-1", then this is the layer shift to the "left". Layers are vertical.
	Example: testTileTypeRight (-1, "EMPTY", 0) - checked

testTileTypeLeft (id, tiletype, typetest, numberoflabel = 0) - check the tiles that are in some layer on the monster.
	id - monster id, if -1, then the current monster
	tiletype - type of tile to check, existing types:
		EMPTY - empty tile (transparent),
		IMPASSABLE - hard tile,
		LADDER - stairs,
		DEATH - killing tile,
		EXITLEVEL - exit from the level.
	typetest - type of test. 0 - whether all tiles are of type tiletype in this layer. 1 - is there at least one tiletype tile in this layer.
	numberoflabel - layer number on the monster. The default value is 0. This is the layer with which the monster intersects on the left (the closest), or if it "stands sideways on the wall",
			then the "this side layer" of the monster. If "+1", this is the layer shift to the "right" (X + 1), if "-1", then this is the layer shift to the "left". Layers are vertical.
	Example: testTileTypeLeft (-1, "EMPTY", 0) - checked

testTileTypeUp (id, tiletype, typetest, numberoflabel = 0) - check tiles that are in some layer on the monster.
	id - monster id, if -1, then the current monster
	tiletype - type of tile to check, existing types:
		EMPTY - empty tile (transparent),
		IMPASSABLE - hard tile,
		LADDER - stairs,
		DEATH - killing tile,
		EXITLEVEL - exit from the level.
	typetest - type of test. 0 - whether all tiles are of type tiletype in this layer. 1 - is there at least one tiletype tile in this layer.
	numberoflabel - layer number on the monster. The default value is 0. This is the layer with which the monster intersects at the very top, or if it "stands with its head", then
			"over the head" monster. If "+1", this is the layer shift "down" (Y + 1), if "-1", then this is the layer shift "up". The layers are horizontal.
	Example: testTileTypeUp (-1, "EMPTY", 0) - checked

getDistanceToPlayerXHead (id, isWithSign = 0) - get the distance to player on the X axis. Returns the distance between the upper left corners of the collision rectangles on the X axis.
	id - monster id, if -1, then the current monster
	isWithSign - whether to return with a sign. The default is 0.
	Returns the distance between the upper left corners of the collision rectangles along the X axis.
	Example: dist = getDistanceToPlayerXHead (-1, 1) - got the distance to player’s head with a sign along the X axis.

getDistanceToPlayerYHead (id, isWithSign = 0) - get the distance to player along the Y axis. Returns the distance between the upper left corners of the collision rectangles along the Y axis.
	id - monster id, if -1, then the current monster
	isWithSign - whether to return with a sign. The default is 0.
	Returns the distance between the upper left corners of the collision rectangles along the y axis.
	Example: dist = getDistanceToPlayerYHead (-1, 1) - got the distance to player’s head with a sign along the Y axis.

getDistanceToPlayerHead (id) - get the distance to player. Returns the distance between the upper left corners of the collision rectangles.
	id - monster id, if -1, then the current monster
	Returns the distance between the upper left corners of the collision rectangles.
	Example: dist = getDistanceToPlayerHead (-1) - got the distance to player’s head with a sign.

testCollisionPlayer (id) - check if there is a collision with player.
	id - monster id, if -1, then the current monster
	Returns 1 if there is a collision, otherwise 0.
	Example: testCollisionPlayer (-1) - checked.

killPlayer (id) - kill player with a monster.
	id - monster id, if -1, then the current monster
	Example: killPlayer (-1) - killed.

killMonster (id, type, addPoints = 0, idPlayer = -1) - kill a monster.
	id - monster identifier, if -1, then the current monster
	type - the type of killing the monster
	addPoints - whether to add points from killing a monster (takes precedence over the GS_no_points parameter, if equal to 1), by default 0 (no)
	idPlayer - on behalf of whom to kill the monster (player's id). The default is -1, that is, on behalf of the main player.
	Example: killMonster (-1, 0) - killed.

addDuplicateMonster (id, coordX, coordY, state, numberofaction, additionalnumberofaction, lives = -1, params = "") - create a duplicate of current monster (copy).
	id - monster identifier, if -1, then the current monster
	coordX - X coordinates of the new monster
	coordY - Y coordinates of the new monster
	state - the state of the new monster
	numberofaction - new monster animation counter
	additionalnumberofaction - additional counter for the animation of the new monster
	lives - number of lives, optional, defaults to infinite, counting collisions (-1)
	params - parameters that you set to the created monster (analogous to setMonsterValue), format: "test1=34;name=PlayerKiller;gun=super;". It is very important to put a semicolon
	at the end, otherwise the last parameter will not be processed. It is not recommended to make names of variables with the GS_ prefix (these are Game Service variables, more details in a separate block).
	Returns the id of the created monster.
	Examples: addDuplicateMonster (-1, 0, 0, "leftstrike", 0, 0, -2, "direction=left;timelife=10;GS_no_points=true;") - created a copy of the zombie in "hit", transparent and with infinite lives and parameters,
	which can be obtained via getMonsterValue (). Death points are not awarded.

addMonster (number, coordX, coordY, state, numberofaction, additionalnumberofaction, lives = -1, params = "") - create a monster by its number.
	number - the number of the monster from the monsterpack
	coordX - X coordinates of the new monster
	coordY - Y coordinates of the new monster
	state - the state of the new monster
	numberofaction - new monster animation counter
	additionalnumberofaction - additional counter for the animation of the new monster
	lives - number of lives, optional, defaults to infinite, counting collisions (-1)
	params - parameters that you set to the created monster (analogous to setMonsterValue), format: "test1=34;name=PlayerKiller;gun=super;". It is very important to put a semicolon
	at the end, otherwise the last parameter will not be processed. It is not recommended to make names of variables with the GS_ prefix (these are Game Service variables, more details in a separate block).
	It is prohibited to use the symbol ";" in variable names and their values, otherwise the data will be processed incorrectly.
	Returns the id of the created monster.
	Examples: addMonster (1, 0, 0, "leftstrike", 0, 0, -2, "direction=left;timelife=10;GS_no_points=true;") - created zombies in "hit", transparent and with infinite lives and with parameters,
	which can be obtained via getMonsterValue (). Death points are not awarded.

setMonsterValue (id, nameofvalue, valueofvalue) - set the current monster to a value that will not be erased after the end of the script cycle. All values are of type "string".
	If numbers are needed, then it is necessary to convert back and forth.
	id - monster identifier, if -1, then the current monster
	nameofvalue is the name of the value. It is not recommended to make variable names with the GS_ prefix (these are Game Service variables, more details in a separate block)
	valueofvalue - the value of the value
	Examples: setMonsterValue (-1, "test", "value") - set the variable test == "value".

getMonsterValue (id, nameofvalue) - get a value from the current monster that will not be erased after the end of the script cycle. All values are of type "string".
	If numbers are needed, then it is necessary to convert back and forth.
	id - monster identifier, if -1, then the current monster
	nameofvalue is the name of the value. It is not recommended to make variable names with the GS_ prefix (these are Game Service variables, more details in a separate block)
	Returns the "value" of the requested value.
	Examples: myvaluetest = getMonsterValue (-1, "test") - got a variable.

setGlobalValue (id, nameofblock, nameofvalue, valueofvalue) - set a global value that is available to all monsters. All values are of type "string".
	If numbers are needed, then it is necessary to convert back and forth.
	id - monster identifier, if -1, then the current monster
	nameofblock - the name of the block where the values are stored
	nameofvalue - the name of the value
	valueofvalue - the value of the value
	Examples: setGlobalValue (-1, "testblock", "test", "value") - set the test == "value" variable in the testblock block.

getGlobalValue (id, nameofblock, nameofvalue) - get a global value that is available to all monsters. All values are of type "string".
	If numbers are needed, then it is necessary to convert back and forth.
	id - monster identifier, if -1, then the current monster
	nameofblock - the name of the block where the values are stored
	nameofvalue - the name of the value
	Returns the "value" of the requested value.
	Examples: myvaluetest = getGlobalValue (-1, "testblock", "test") - got a variable.

setPlayerValue (id, nameofblock, nameofvalue, valueofvalue) - set player's value. All values are of type "string".
	If numbers are needed, then it is necessary to convert back and forth.
	id - monster identifier, if -1, then the current monster
	nameofblock - the name of the block where the values are stored
	nameofvalue - the name of the value
	valueofvalue - the value of the value
	Examples: setPlayerValue (-1, "test", "testblock", "value") - set the variable test == "value".

getPlayerValue (id, nameofblock, nameofvalue) - get player's value. All values are of type "string".
	If numbers are needed, then it is necessary to convert back and forth.
	id - monster identifier, if -1, then the current monster
	nameofblock - the name of the block where the values are stored
	nameofvalue - the name of the value
	Returns the "value" of the requested value.
	Examples: myvaluetest = getPlayerValue (-1, "testblock", "test") - got a variable.

getModSettingsValue (id, nameofblock, nameofvalue) - get the value from ModPackName/settings.ini.
	id - monster identifier, if -1, then the current monster
	nameofblock - block name
	nameofvalue - the name of the value
	Returns the "value" of the requested value.
	Examples: getModSettingsValue (-1, "general", "spawn_frequency") - got a variable.

setModSettingsValue (id, nameofblock, nameofvalue, valueofvalue) - set the value in ModPackName/settings.ini (not saved to file, only for the current "session", saved between levels)
	id - monster identifier, if -1, then the current monster
	nameofblock - block name
	nameofvalue - the name of the value
	valueofvalue - the value of the value
	Examples: setModSettingsValue (-1, "general", "spawn_frequency", "10") - set the value.

getCoordMonsterX (id) - get the coordinates of the monster in X.
	id - monster id, if -1, then the current monster
	Returns the coordinate of the monster in X.
	Example: getCoordMonsterX (-1) - received.

getCoordMonsterY (id) - get the coordinates of the monster in Y.
	id - monster id, if -1, then the current monster
	Returns the coordinate of the monster in Y.
	Example: getCoordMonsterY (-1) - received.

getCoordPlayerX () - getting player's X coordinate.
	Returns player's X coordinate.
	Example: getCoordPlayerX () - received.

getCoordPlayerY () - getting player's Y coordinate.
	Returns player's Y coordinate.
	Example: getCoordPlayerY () - received.

getStatePlayer () - getting the state of player.
        Returns the state of player.
        Example: getStatePlayer () - received.

getNumberOfLives (id) - get the number of lives from the monster.
	id - monster id, if -1, then the current monster
	Returns the number of lives of a monster
	Example: lives = getNumberOfLives (-1) - received.

setNumberOfLives (id, lives) - set the number of lives of the monster. If set to 0, then the monster will NOT DIE. -1 - infinitely lives, but not transparent. -2 - infinitely lives and transparent.
	id - monster id, if -1, then the current monster
	lives - the set number of lives.
	Examples: setNumberOfLives (-1, 100) - set the monster to 100 lives.
		setNumberOfLives (-1, -2) - made the monster transparent to bullets and with an infinite number of lives.

getMonsterID () - get the monster ID at the level (not type! even the same monsters have a unique ID at each level).
	Examples: getMonsterID () - got the ID.

getMonsterCollision (id) - Get the collision rectangle from the monster.
	id - monster identifier, if -1, then the current monster
	Returns four numbers - the monster collision rectangle. First X and Y of the upper left corner, then X and Y of the lower right corner
	Example: x1, y1, x2, y2 = getMonsterCollision (-1) - got.

addImageToFactoryTemporaryImage (pack, number, state, numberofframe, coordX, coordY, timeLive, changeX, changeY, type, onTop = 0) - add an image to the temporary image factory.
	pack - the name of the image pack, only "monsters" is supported
	number - monster number
	state - monster state
	numberofframe - monster frame number
	coordX - X coordinate
	coordY - Y coordinate
	timeLive - image lifetime in render cycles
	changeX - rate of change of the X coordinate of the image in pixels in the rendering cycle
	changeY - rate of change of the Y coordinate of the image in pixels in the rendering cycle
	type - image type, so far does not affect anything.
	onTop - if 1, then draws images on top of all texture layers, otherwise at the level of player and monsters. The default is 0.
	Example: addImageToFactoryTemporaryImage ("monsters", 4, "web", 1, getCoordMonsterX (-1) + 4, getCoordMonsterY (-1) + 0, 2 * (16 * 6 / speedattack - noa) + 4, 0, 0, "web")

addPackImagesToFactoryTemporaryImage (pack, number, state, coordX, coordY, timeLive, changeX, changeY, numberofframes, type, isAnimated, onTop = 0) - add a package of images to the temporary image factory.
	pack - the name of the image pack, only "monsters" is supported
	number - monster number
	state - monster state
	coordX - X coordinate
	coordY - Y coordinate
	timeLive - image lifetime in render cycles
	changeX - rate of change of the X coordinate of the image in pixels in the rendering cycle
	changeY - rate of change of the Y coordinate of the image in pixels in the rendering cycle
	numberofframes - number of frames for animation
	type - image type, so far does not affect anything.
	onTop - if 1, then draws images on top of all texture layers, otherwise at the level of player and monsters. The default is 0.
	isAnimated - whether to animate the created image

changeNextLevel () - change the level to the next.

changeLevel(level) - change the level according to the algorithm in level. The algorithm is similar for the changelevelongameover level parameter, see Level_Params for details.
	Example: changeLevel("+4f") - add 4 levels, and forcefully, i.e. do not cut when jumping the number of levels, which allows you to finish the game on a level with a number different from the last one.
		 changeLevel("3") - change level to 3 level.

playSound (soundname, new_sound = 1, restart = 0, is_loop = 0, offset_ms = 0) - start playing sound.
	soundname - the name of the sound.
	new_sound - whether to make the sound new (if not, then if it plays, it will either start over depending on
	from the restart parameter, or nothing happens).
	restart - whether to restart the sound if it is playing. Works only when new_sound = false.
	is_loop - whether to loop the sound.
	offset_ms - clipping at the beginning of the sound.
	Returns the key of the sound being played (after the completion of playing, the key becomes invalid).
	Example: playSound ("boom", 0, 1, 1, 2) - start playing the boom sound not like a new one, again, loop, with cutoff 2.

stopSound (soundname) - stop playing sound.
	soundname - the name of the sound.
	Returns 1 if successful, 0 otherwise.
	Example: stopSound ("boom") - stop the sound.

pauseSound (soundname) - pause sound playback.
	soundname - the name of the sound.
	Returns 1 if successful, 0 otherwise.
	Example: pauseSound ("boom") - pause the sound.

playMusic (soundname, restart = false, is_loop = false, offset_ms = 0) - start playing sound.
	soundname is the name of the music.
	restart - whether to start the music again if it is playing.
	is_loop - whether to loop the music.
	offset_ms - cut off at the beginning of the music.
	Returns 1 if successful, 0 otherwise.
	Example: playMusic ("boom", 1, 1, 2) - start playing the boom sound again, loop, with cutoff 2.

stopMusic (soundname) - stop playing music.
	soundname is the name of the music.
	Returns 1 if successful, 0 otherwise.
	Example: stopMusic ("boom") - stop music.

pauseMusic (soundname) - pause music playing.
	soundname is the name of the music.
	Returns 1 if successful, 0 otherwise.
	Example: pauseMusic ("boom") - pause music.

stopAllMusic() - stop playing all music.
	Example: stopAllMusic() - stop all music.

-------------------------------------------------------------------------

GameService variables. Variables starting with GS_:
	For monsters:
		GS_no_points - if it is true, then after the death of the monster, no points are given. Useful if it's part of the boss.
		GS_type - standard or boss. Overrides the standard type.
	Level format:
		It is forbidden to use the symbol ";" in the values and names of variables of monsters and tiles, otherwise the loading will fail.
		GS_lives - the number of lives of the installed monster. It can be read from the intelligence file, but the change will do nothing. Use the setNumberOfLives (id, lives) function to change the life of the monster from the intel file.
			Example: 1=6;176;480;{super=false;GS_lives=6;GS_type=standard;};
			Here the monster will have 6 lives, it will not be the boss (although in the original number 6 is of the boss type), and the super variable can be read with getMonsterValue() (it will be equals "false")
		GS_to_level - tile variable (does not depend on the EXITLEVEL type). Indicates which level to go to.
		GS_teleport - tile variable. Teleport the player to the coordinates specified, separated by commas. Example: 12; 12 = GS_teleport = 123.142;
		GS_animation_shift - tile variable. How many milliseconds to shift the animation of this tile.
		GS_animation_frame_lock - tile variable. If set, the tile animation does not work, instead the frame assigned to it is shown. The first frame is numbered 0.
		GS_secret - tile variable. Contains the name of the activated secret when the tile is touched (from the Secrets list).