1. Немного о монстрах
Монстры содержатся либо в модпаке в папке Monsters, либо в отдельном паке монстров.
Модпак содержит все паки, отдельные же паки можно подключать, заменяя только какие-то
конкретные детали в модпаках. Например, подключить других монстров, бонусы, уровни.
Пока будем разбираться только с монстрами. В дальнейшем я не буду оговаривать, что
монстры хранятся в папке Monsters модпака или в отдельном паке, а буду просто говорить,
что монстры хранятся в отдельной папке Monsters. Структуру файлов буду описывать по
с комментариями из C++.
Итак, в папке Monsters хранится файл monsters.dat, его структура:
---
[info]
numberofmonsters=11		// Количество монстров в модпаке

[draw]
transparentmaskR=204		// Маска прозрачности RED
transparentmaskG=255		// Маска прозрачности GREEN
transparentmaskB=204		// Маска прозрачности BLUE
---

Монстры нумеруются от 1 до numberofmonsters включительно. Маска прозрачности - тот цвет
в текстурах, который считается прозрачным и вырезается при отрисовке. Каждый монстр
хранится в папке со своим номером. Рассмотрим структуру этой папки последовательно.
Будем рассматривать на примере первого монстра (зомби) из модпака StandardDave. Номер
монстра - 1, его папка, соответственно, "Monsters/1".
В папке есть файл monster.info, его структура:
---
/*В блоке [info] описываются все "состояния" монстра. Состояние является строкой.
Каждому состоянию соответствуют свои текстуры монстра. Также каждое состояние имеет фреймы
анимации. Состояние вводится с помощью введения переменной "numberofframes[NAMEOFSTATE]=[NUMBEROFFRAMEOFTHISSTATE]"
Например: "numberofframesdownrun=2" означает, что у нас есть состояние "downrun", которое имеет
два фрейма анимации. Текстуры состояния должны лежать в папке этого монстра, и иметь названия
следующего вида: "NAMEOFSTATE_[NUMBEROFFRAME].bmp". Например, у состояния "downrun" есть
две текстуры: "downrun_1.bmp" и "downrun_2.bmp". Если хоть какой-то текстуры не будет, возникнет
ошибка, которая приведёт к закрытию игры. Также на настоящее время в папке содержится файл
main.bmp - зачем он, я не знаю, он возник при извлечении ресурсов из оригинальной игры, поэтому
я его пока оставил. Структура текстуры на настоящее время взята, опять же, из извлечения ресурсов
из игры, и она следующая: текстура представляет из себя прямоугольник, разделённый ровно пополам,
в левой части сам монстр, а в правой его прямоугольник столкновений, цвет которого только такой,
какой находится у монстров в модпаке "StandardDave", это нерентабельно по размеру, который будут
занимать модпаки, но, опять же, взято из извлечения текстур из оригинальной игры. В будущем просто
будет изменено на координаты прямоугольника коллизий в monster.info.*/
[info]
numberofframesdownrun=2		// Количество фреймов анимации соответствующего состояния
numberofframesleftrun=4		// Количество фреймов анимации соответствующего состояния
numberofframesleftstrike=3		// Количество фреймов анимации соответствующего состояния
numberofframesrightrun=4		// Количество фреймов анимации соответствующего состояния
numberofframesrightstrike=3		// Количество фреймов анимации соответствующего состояния

[other]
numberofframesdeathtiles=5		// Количество фреймов тайлов проигрыша. Они хранятся в папке
					// DeathTiles с именами вида "[NUMBER].bmp", нумеруются от
					// единицы до этого значения включительно.
outputshiftX=0		// Насколько сдвигать по оси X монстра при помещении его в уровень. Дело в том,
			// что зомби слишком высокий, на уровнях он расположен на втором тайле от пола,
			// и если это так оставить, без сдвигов, то ноги окажутся в полу. Поэтому мы его
			// при выводе сдвигаем так, чтобы он попал ровно на пол (по оси Y).
outputshiftY=-8		// Вот тут сдвигаем по оси Y монстра.
animationstep=6		// Эта переменная используется для скорости анимации в интеллекте

[options]
lives=2		// Количество жизней монстра. Если -1, то у него бесконечно жизней, попадания в него учитываются (остановка пули).
		// Если -2, то у него бесконечно жизней, и попадания в него не учитываются (пуля пролетает сквозь него).
speed1=11		// Переменная, которая будет использоваться в интеллекте
speed2=6		// Переменная, которая будет использоваться в интеллекте
speed3=8		// Переменная, которая будет использоваться в интеллекте
speed4=5		// Переменная, которая будет использоваться в интеллекте
downlook=5		// Переменная, которая будет использоваться в интеллекте
type=standard		// Тип монстра, standard или boss. При убийстве последнего босса на уровне, происходит
			// автоматический переход на следующий уровень.
---

2. Интеллект монстров.
Интеллект монстров описывается в папке монстра в файле intellect.lua на языке lua. Будем одновременно
рассматривать пример с интеллектом зомби.
Необходимо описать следующие функции:
1) setFirstState(), возвращает состояние, которое присваивается монстру при его начальной загрузке:
function setFirstState()
	return "rightrun"
end
2) mainFunc(), ничего не возвращает, является главной функцией интеллекта, вызывается каждый цикл отрисовки, если
её не описать, то она будет сгенерирована автоматически, но пустой. Цикл отрисовки вызывается раз в число миллисекунд,
указанных в DD2.ini в блоке [video] в переменной drawstep.
Следующий функции описывать можно, но необязательно:
1) onDamage(damage), вызывается при получении монстром повреждений, принимает количество полученных повреждений.
2) onKill(type), вызывается при гибели монстра, принимает тип гибели монстра. ВАЖНО: независимо от того, что вы сделаете в
этой функции, монстр будет удалён. Вы можете создать его копию, чтобы продолжить его существование. Но вы можете в функции
onDamage(dmg) проверить количество его жизней, и изменить его, если хотите не убивать монстра. Убийство выстрелом передаёт type == 0.
3) getAPIVersion(), возвращает версию API, для которой написан код скрипта. Возвращать нужно число.
function getAPIVersion()
	return 0.1
end

Теперь перейдём к описанию самого интеллекта. Перед тем, как описывать API, я скажу несколько слов об анимации.
Вся анимации переключается в файле интеллекта. Для этого есть функция переключения на следующий фрейм и
дополнительный счётчик. Вот так реализована анимация у зомби:
nextAdditionalNumberOfAction(-1)	-- Увеличили дополнительный счётчик. Вообще говоря, можно это было реализовать через
					-- глобальные переменные, но я сделал это попроще, так как эта конструкция необходима
					-- почти для каждого монстра
if getAdditionalNumberOfAction(-1) % getMonsterOption(-1, "other", "animationstep") == 0 then -- проверили, что пора переключать анимацию
	nextNumberOfAction(-1) -- переключили
else
	return -- если не надо переключать, то зомби ничего и не делает
end

Ну вот, думаю, пока и всё, теперь просто опишем API.

setState(id, state) - Установить новое состояние
	id - идентификатор монстра, если -1, то текущий монстр
	state - новое состояние монстра
	Пример: setState(-1, "downrun")

getState(id) - Получить текущее состояние
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает текущее состояние монстра
	Пример: statemonster = getState(-1)

goLeft(id, move, isCorrect, isCorrectStand = 0, isOnCeil = 0) - Передвинуть монстра влево (уменьшить X)
	id - идентификатор монстра, если -1, то текущий монстр
	move - количество пикселей, на которые сдвигается монстр
	isCorrect -  Производить ли коррекцию физики (столкновения с твёрдыми тайлами)
	isCorrectStand - Производить ли коррекцию монстра, как "стоящего" на ногах. Т.е. если в том направлении конец "пола",
			то монстр не пойдёт по пустоте. По умолчаню false (т.е. 0 по lua).
	isOnCeil - Находимся ли мы на потолке (инвертация определения "пола"), работает только при isCorrectStand == 1. По умолчанию 0.
	Возвращает 0, если коррекция физики не производилась и 1, если производилась.
	Примеры: goLeft(-1, 2) - сдвинули влево на 2 пикселя, не обращая внимания ни на что.
		goLeft(-1, 2, 1) - сдвинули влево на 2 пикселя, не разрешая проходить сквозь твёрдые тайлы.
		goLeft(-1, 3, 1, 1) - сдвинули влево на 3 пикселя, не разрешая проходить сквозь твёрдые тайлы, а также двигаться по пустоте.
		goLeft(-1, 4, 1, 1, 1) - сдвинули влево на 4 пикселя, не разрешая проходить сквозь твёрдые тайлы, двигаться по пустоте, считая,
					что мы ходим по потолку (например актуально для слизня и паука из второго уровня оригинального Дейва).

goRight(id, move, isCorrect, isCorrectStand = 0, isOnCeil = 0) - Передвинуть монстра вправо (увеличить X)
	id - идентификатор монстра, если -1, то текущий монстр
	move - количество пикселей, на которые сдвигается монстр
	isCorrect -  Производить ли коррекцию физики (столкновения с твёрдыми тайлами)
	isCorrectStand - Производить ли коррекцию монстра, как "стоящего" на ногах. Т.е. если в том направлении конец "пола",
			то монстр не пойдёт по пустоте. По умолчаню false (т.е. 0 по lua).
	isOnCeil - Находимся ли мы на потолке (инвертация определения "пола"), работает только при isCorrectStand == 1. По умолчанию 0.
	Возвращает 0, если коррекция физики не производилась и 1, если производилась.
	Примеры: goRight(-1, 2) - сдвинули вправо на 2 пикселя, не обращая внимания ни на что.
		goRight(-1, 2, 1) - сдвинули вправо на 2 пикселя, не разрешая проходить сквозь твёрдые тайлы.
		goRight(-1, 3, 1, 1) - сдвинули вправо на 3 пикселя, не разрешая проходить сквозь твёрдые тайлы, а также двигаться по пустоте.
		goRight(-1, 4, 1, 1, 1) - сдвинули вправо на 4 пикселя, не разрешая проходить сквозь твёрдые тайлы, двигаться по пустоте, считая,
					что мы ходим по потолку (например актуально для слизня и паука из второго уровня оригинального Дейва).

goUp(id, move, isCorrect) - Передвинуть монстра вверх (уменьшить Y)
	id - идентификатор монстра, если -1, то текущий монстр
	move - количество пикселей, на которые сдвигается монстр
	isCorrect -  Производить ли коррекцию физики (столкновения с твёрдыми тайлами)
	Возвращает 0, если коррекция физики не производилась и 1, если производилась.
	Примеры: goUp(-1, 2) - сдвинули вверх на 2 пикселя, не обращая внимания ни на что.
		goUp(-1, 2, 1) - сдвинули вверх на 2 пикселя, не разрешая проходить сквозь твёрдые тайлы.

goDown(id, move, isCorrect, ladder = 0) - Передвинуть монстра вниз (увеличить Y)
	id - идентификатор монстра, если -1, то текущий монстр
	move - количество пикселей, на которые сдвигается монстр
	isCorrect -  Производить ли коррекцию физики (столкновения с твёрдыми тайлами)
	ladder - Считаются ли "лесенки" (ну и "полочки" и т. д.) твёрдым объектом.
	Возвращает 0, если коррекция физики не производилась и 1, если производилась.
	Примеры: goDown(-1, 2) - сдвинули вниз на 2 пикселя, не обращая внимания ни на что.
		goDown(-1, 2, 1) - сдвинули вниз на 2 пикселя, не разрешая проходить сквозь твёрдые тайлы.

Счётчик анимации переключает анимацию монстра.

setNumberOfAction(id, numbofact) - установить счётчик анимации. Работает только при значении из DD2.ini [video] : animationstep == true
	id - идентификатор монстра, если -1, то текущий монстр
	numbofact - устанавливаемое число счётчика
	Пример: setNumberOfAction(12) - установили счётчик == 12.

nextNumberOfAction(id)- переключает анимацию на следующий фрейм. Работает только при значении из DD2.ini [video] : animationstep == true
	id - идентификатор монстра, если -1, то текущий монстр
	Пример: nextNumberOfAction(-1) - переключили анимацию.

setNullNumberOfAction(id) - Обнулить счётчик анимации. Работает только при значении из DD2.ini [video] : animationstep == true
	id - идентификатор монстра, если -1, то текущий монстр
	Пример: setNullNumberOfAction(-1) - обнулили.

getNumberOfAction(id) - Получить счётчик анимации.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает текущий счётчик анимации.
	Пример: getNumberOfAction(-1) - получили.

Дополнительный счётчик анимации дан как вспомогательный и не делает ничего.

setAdditionalNumberOfAction(id, numbofact) - установить дополнительный счётчик анимации. Работает только при значении из DD2.ini [video] : animationstep == true
	id - идентификатор монстра, если -1, то текущий монстр
	numbofact - устанавливаемое число счётчика
	Пример: setAdditionalNumberOfAction(12) - установили дополнительный счётчик == 12.

nextAdditionalNumberOfAction(id)- переключает дополнительный счётчик анимации на следующий фрейм. Работает только при значении из DD2.ini [video] : animationstep == true
	id - идентификатор монстра, если -1, то текущий монстр
	Пример: nextAdditionalNumberOfAction(-1) - переключили дополнительный счётчик анимации.

setNullAdditionalNumberOfAction(id)- Обнулить дополнительный счётчик анимации. Работает только при значении из DD2.ini [video] : animationstep == true
	id - идентификатор монстра, если -1, то текущий монстр
	Пример: setNullAdditionalNumberOfAction(-1) - обнулили.

getAdditionalNumberOfAction(id) - Получить дополнительный счётчик анимации.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает текущий дополнительный счётчик анимации.
	Пример: getAdditionalNumberOfAction(-1) - получили.

getMonsterOption(id, block, variable) - получить значение из monster.info.
	id - идентификатор монстра, если -1, то текущий монстр
	block - название блока, откуда получаем значение
	variable - название переменной, значение которое хотим узнать
	Возвращает значение переменной [block] : variable из monster.info
	Пример: getMonsterOption(-1, "other", "animationstep") - получили из блока "other" переменную с названием "animationstep".

getMainValue(block, variable) - получить значение из DD2.ini.
	block - название блока, откуда получаем значение
	variable - название переменной, значение которое хотим узнать
	Возвращает значение переменной [block] : variable из DD2.ini
	Пример: getMainValue("video", "drawstep") - получили из блока "video" переменную с названием "drawstep".

testLookDaveX(id) - проверяет, видит ли монстр дейва по оси X (какой-то частью прямоугольника столкновений)
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает 0, если не видит, -1, если видит слева, 1, если справа.
	Пример: testlook = testLookDaveX(-1) - проверили.
		testlook = math.abs(testLookDaveX(-1)) - проверили бех учёта знака.

testLookDaveY(id) - проверяет, видит ли монстр дейва по оси Y (какой-то частью прямоугольника столкновений)
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает 0, если не видит, -1, если видит выше, 1, если ниже.
	Пример: testlook = testLookDaveY(-1) - проверили.
	testlook = math.abs(testLookDaveY(-1)) - проверили бех учёта знака.

getMonsterFrame(id) - получить текущий фрейм анимации монстра.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает текущий фрейм анимации монстра.
	Пример: frame = getMonsterFrame(-1) - получили.

getDistanceToDaveX(id, isWithSign = 0) - получить расстояние до Дейва по оси X. Возвращает расстояние между ближайшими точками прямоугольников столкновений.
	id - идентификатор монстра, если -1, то текущий монстр
	isWithSign - возвращать ли со знаком. По умолчанию 0.
	Возвращает расстояние до Дейва по оси X.
	Пример: dist = getDistanceToDaveX(-1, 1) - получили расстояние до Дейва со знаком.

getDistanceToDaveY(id, isWithSign = 0) - получить расстояние до Дейва по оси Y. Возвращает расстояние между ближайшими точками прямоугольников столкновений.
	id - идентификатор монстра, если -1, то текущий монстр
	isWithSign - возвращать ли со знаком. По умолчанию 0.
	Возвращает расстояние до Дейва по оси Y.
	Пример: dist = getDistanceToDaveX(-1, 1) - получили расстояние до Дейва со знаком.

getDistanceToDave(id) - получить расстояние до Дейва. Возвращает кратчайшее расстояние между вершинами прямоугольников столкновений.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает расстояние до Дейва по оси Y.
	Пример: getDistanceToDave(-1) - получили

ВНИМАНИЕ! ВСЕ ФУНКЦИИ НА ТЕСТ ТАЙЛОВ СЫРЫЕ И РАБОТАЮТ НЕСТАБИЛЬНО, ОНИ БУДУТ ПЕРЕПИСАНЫ!

testTileTypeDown(id, tiletype, typetest, numberoflabel = 0) - проверка тайлов, находящихся в некотором слое на монстре.
	id - идентификатор монстра, если -1, то текущий монстр
	tiletype - тип тайла для проверки, существующие типы:
		EMPTY - пустой тайл (прозрачный),
		IMPASSABLE - твёрдый тайл,
		LADDER - лестница,
		DEATH - убивающий тайл,
		EXITLEVEL - выход из уровня.
	typetest - тип теста. 0 - все ли тайлы имеют тип tiletype в этом слое. 1 - есть ли хоть один тайл типа tiletype в этом слое.
	numberoflabel - номер слоя на монстре. По умолчанию 0. Это слой, с которым монстр пересекается в самом низу, или же, если он "стоит", то "под ногами" монстра.
			Если "+1", это это сдвиг слоя "вниз" (Y + 1), если "-1", то это сдвиг слоя "вверх". Слои горизонтальные.
	Пример: testTileTypeDown(-1, "EMPTY", 0) - проверили

testTileTypeRight(id, tiletype, typetest, numberoflabel = 0) - проверка тайлов, находящихся в некотором слое на монстре.
	id - идентификатор монстра, если -1, то текущий монстр
	tiletype - тип тайла для проверки, существующие типы:
		EMPTY - пустой тайл (прозрачный),
		IMPASSABLE - твёрдый тайл,
		LADDER - лестница,
		DEATH - убивающий тайл,
		EXITLEVEL - выход из уровня.
	typetest - тип теста. 0 - все ли тайлы имеют тип tiletype в этом слое. 1 - есть ли хоть один тайл типа tiletype в этом слое.
	numberoflabel - номер слоя на монстре. По умолчанию 0. Это слой, с которым монстр пересекается справа (самый дальний), или же, если он "стоит боком на стене",
			то "этот боковой слой" монстра. Если "+1", это это сдвиг слоя "вправо" (X + 1), если "-1", то это сдвиг слоя "влево". Слои вертикальные.
	Пример: testTileTypeRight(-1, "EMPTY", 0) - проверили

testTileTypeLeft(id, tiletype, typetest, numberoflabel = 0) - проверка тайлов, находящихся в некотором слое на монстре.
	id - идентификатор монстра, если -1, то текущий монстр
	tiletype - тип тайла для проверки, существующие типы:
		EMPTY - пустой тайл (прозрачный),
		IMPASSABLE - твёрдый тайл,
		LADDER - лестница,
		DEATH - убивающий тайл,
		EXITLEVEL - выход из уровня.
	typetest - тип теста. 0 - все ли тайлы имеют тип tiletype в этом слое. 1 - есть ли хоть один тайл типа tiletype в этом слое.
	numberoflabel - номер слоя на монстре. По умолчанию 0. Это слой, с которым монстр пересекается слева (самый ближний), или же, если он "стоит боком на стене",
			то "этот боковой слой" монстра. Если "+1", это это сдвиг слоя "вправо" (X + 1), если "-1", то это сдвиг слоя "влево". Слои вертикальные.
	Пример: testTileTypeLeft(-1, "EMPTY", 0) - проверили

testTileTypeUp(id, tiletype, typetest, numberoflabel = 0) - проверка тайлов, находящихся в некотором слое на монстре.
	id - идентификатор монстра, если -1, то текущий монстр
	tiletype - тип тайла для проверки, существующие типы:
		EMPTY - пустой тайл (прозрачный),
		IMPASSABLE - твёрдый тайл,
		LADDER - лестница,
		DEATH - убивающий тайл,
		EXITLEVEL - выход из уровня.
	typetest - тип теста. 0 - все ли тайлы имеют тип tiletype в этом слое. 1 - есть ли хоть один тайл типа tiletype в этом слое.
	numberoflabel - номер слоя на монстре. По умолчанию 0. Это слой, с которым монстр пересекается в самом верху, или же, если он "стоит головой", то
			"над головой" монстра. Если "+1", это это сдвиг слоя "вниз" (Y + 1), если "-1", то это сдвиг слоя "вверх". Слои горизонтальные.
	Пример: testTileTypeUp(-1, "EMPTY", 0) - проверили

getDistanceToDaveXHead(id, isWithSign = 0) - получить расстояние до Дейва по оси X. Возвращает расстояние между левыми верхними углами прямоугольников столкновений по оси X.
	id - идентификатор монстра, если -1, то текущий монстр
	isWithSign - возвращать ли со знаком. По умолчанию 0.
	Возвращает расстояние между левыми верхними углами прямоугольников столкновений по оси X.
	Пример: dist = getDistanceToDaveXHead(-1, 1) - получили расстояние до головы Дейва со знаком по оси X.

getDistanceToDaveYHead(id, isWithSign = 0) - получить расстояние до Дейва по оси Y. Возвращает расстояние между левыми верхними углами прямоугольников столкновений по оси Y.
	id - идентификатор монстра, если -1, то текущий монстр
	isWithSign - возвращать ли со знаком. По умолчанию 0.
	Возвращает расстояние между левыми верхними углами прямоугольников столкновений по оси Y.
	Пример: dist = getDistanceToDaveYHead(-1, 1) - получили расстояние до головы Дейва со знаком по оси Y.

getDistanceToDaveHead(id) - получить расстояние до Дейва. Возвращает расстояние между левыми верхними углами прямоугольников столкновений.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает расстояние между левыми верхними углами прямоугольников столкновений.
	Пример: dist = getDistanceToDaveHead(-1) - получили расстояние до головы Дейва со знаком.

testCollisionDave(id) - проверить, имеет ли место быть столкновение с Дейвом.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает 1, если столкновение есть, иначе 0.
	Пример: testCollisionDave(-1) - проверили.

killDave(id) - убить Дейва монстром.
	id - идентификатор монстра, если -1, то текущий монстр
	Пример: killDave(-1) - убили.

killMonster(id, type) - убить монстра.
	id - идентификатор монстра, если -1, то текущий монстр
	type - тип убийства монстра
	Пример: killMonster(-1, 0) - убили.

addDuplicateMonster(id, coordX, coordY, state, numberofaction, additionalnumberofaction, lives = -1, params = "") - создать дубликат текущего монстра (копию).
	id - идентификатор монстра, если -1, то текущий монстр
	coordX - координаты нового монстра по X
	coordY - координаты нового монстра по Y
	state - состояние нового монстра
	numberofaction - счётчик анимации нового монстра
	additionalnumberofaction - дополнительный счётчик анимации нового монстра
	lives - количество жизней, необязательный параметр, по умолчанию бесконечно с учётом столкновений (-1)
	params - параметры, которые вы устанавливаете создаваемому монстру (аналог setMonsterValue), формат: "test1=34;name=DaveKiller;gun=super;". Очень важно поставить точку с запятой
	в конце, иначе последний параметр не обработается. Не рекомендуется делать названия переменных с префикса GS_ (это Game Service переменные, подробнее в отдельном блоке).
	Возвращает идентификатор созданного монстра.
	Примеры: addDuplicateMonster(-1, 0, 0, "leftstrike", 0, 0, -2, "direction=left;timelife=10;GS_no_points=true;") - создали копию зомби в "ударе", прозрачного и с бесконечными жизнями и с параметрами,
	которые можно получить через getMonsterValue(). Очки за смерть не даются.

addDuplicateMonster(number, coordX, coordY, state, numberofaction, additionalnumberofaction, lives = -1, params = "") - создать монстра по его номеру.
	number - номер монстра из монстрпака
	coordX - координаты нового монстра по X
	coordY - координаты нового монстра по Y
	state - состояние нового монстра
	numberofaction - счётчик анимации нового монстра
	additionalnumberofaction - дополнительный счётчик анимации нового монстра
	lives - количество жизней, необязательный параметр, по умолчанию бесконечно с учётом столкновений (-1)
	params - параметры, которые вы устанавливаете создаваемому монстру (аналог setMonsterValue), формат: "test1=34;name=DaveKiller;gun=super;". Очень важно поставить точку с запятой
	в конце, иначе последний параметр не обработается. Не рекомендуется делать названия переменных с префикса GS_ (это Game Service переменные, подробнее в отдельном блоке).
	Возвращает идентификатор созданного монстра.
	Примеры: addMonster(1, 0, 0, "leftstrike", 0, 0, -2, "direction=left;timelife=10;GS_no_points=true;") - создали зомби в "ударе", прозрачного и с бесконечными жизнями и с параметрами,
	которые можно получить через getMonsterValue(). Очки за смерть не даются.

setMonsterValue(id, nameofvalue, valueofvalue) - установить у текущего монстра значение, которое не сотрётся после окончания цикла скрипта. Все значения имеют тип "строка".
						Если нужны числа, то необходимо преобразовывать туда-обратно.
	id - идентификатор монстра, если -1, то текущий монстр
	nameofvalue - название значения. Не рекомендуется делать названия переменных с префикса GS_ (это Game Service переменные, подробнее в отдельном блоке)
	valueofvalue - значение значения
	Примеры: setMonsterValue(-1, "test", "value") - установили переменную test == "value".

getMonsterValue(id, nameofvalue) - получить у текущего монстра значение, которое не сотрётся после окончания цикла скрипта. Все значения имеют тип "строка".
					Если нужны числа, то необходимо преобразовывать туда-обратно.
	id - идентификатор монстра, если -1, то текущий монстр
	nameofvalue - название значения. Не рекомендуется делать названия переменных с префикса GS_ (это Game Service переменные, подробнее в отдельном блоке)
	Возвращает "значение" запрашиваемого значения.
	Примеры: myvaluetest = getMonsterValue(-1, "test") - получили переменную.

GameService-перменные. Переменные, начинающиеся с GS_:
	Доступные:
		GS_no_points - если равно true, то после гибели монстра не даются очки. Полезно, если это часть босса.

setGlobalValue(id, nameofvalue, valueofvalue) - установить глобальное значение, которое доступно всем монстрам. Все значения имеют тип "строка".
						Если нужны числа, то необходимо преобразовывать туда-обратно.
	id - идентификатор монстра, если -1, то текущий монстр
	nameofvalue - название значения
	valueofvalue - значение значения
	Примеры: setGlobalValue(-1, "test", "value") - установили переменную test == "value".

getGlobalValue(id, nameofvalue) - получить глобальное значение, которое доступно всем монстрам. Все значения имеют тип "строка".
						Если нужны числа, то необходимо преобразовывать туда-обратно.
	id - идентификатор монстра, если -1, то текущий монстр
	nameofvalue - название значения
	Возвращает "значение" запрашиваемого значения.
	Примеры: myvaluetest = getGlobalValue(-1, "test") - получили переменную.

getModSettingsValue(id, nameofblock, nameofvalue) - получить значение из ModPackName/settings.ini.
	id - идентификатор монстра, если -1, то текущий монстр
	nameofblock - название блока
	nameofvalue - название значения
	Возвращает "значение" запрашиваемого значения.
	Примеры: getModSettingsValue(-1, "general", "spawn_frequency") - получили переменную.

setModSettingsValue(id, nameofblock, nameofvalue, valueofvalue) - установить значение в ModPackName/settings.ini (не сохраняется в файл, только на текущую "сессию", сохраняется между уровнями)
	id - идентификатор монстра, если -1, то текущий монстр
	nameofblock - название блока
	nameofvalue - название значения
	valueofvalue - значение значения
	Примеры: setModSettingsValue(-1, "general", "spawn_frequency", "10") - установили значение.

getCoordMonsterX(id) - получение координаты монстра по X.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает координату монстра по X.
	Пример: getCoordMonsterX(-1) - получили.

getCoordMonsterY(id) - получение координаты монстра по Y.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает координату монстра по Y.
	Пример: getCoordMonsterY(-1) - получили.

getCoordDaveX() - получение координаты Дейва по X.
	Возвращает координату Дейва по X.
	Пример: getCoordDaveX() - получили.

getCoordDaveY() - получение координаты Дейва по Y.
	Возвращает координату Дейва по Y.
	Пример: getCoordDaveY() - получили.

getStateDave() - получение состояния Дейва.
	Возвращает состояние Дейва.
	Пример: getStateDave() - получили.

getNumberOfLives(id) - получить количество жизней у монстра.
	id - идентификатор монстра, если -1, то текущий монстр
	Возвращает число жизней у монстра
	Пример: lives = getNumberOfLives(-1) - получили.

setNumberOfLives(id, lives) - установить количество жизней у монстра. Если установить 0, то монстр НЕ УМРЁТ. -1 - бесконечно жизней, но не прозрачный. -2 - бесконечно жизней и прозрачный.
	id - идентификатор монстра, если -1, то текущий монстр
	lives - устанавливаемое количество жизней.
	Примеры: setNumberOfLives(-1, 100) - установили монстру 100 жизней.
		setNumberOfLives(-1, -2) - сделали монстра прозрачным для пуль и с бесконечным количеством жизней.

getMonsterID() - получить ID монстра на уровне (не тип! даже одинаковые монстры имеют уникальный ID на каждом уровне).
	Примеры: getMonsterID() - получили ID.

addImageToFactoryTemporaryImage(pack, number, state, numberofframe, coordX, coordY, timeLive, changeX, changeY, type) - добавить в фабрику временных изображений изображение.
	pack - название пака изображений, поддерживается только "monsters".
	number - номер монстра.
	state - состояние монстра.
	numberofframe - номер фрейма монстра.
	coordX - координата по X.
	coordY - координата по Y.
	timeLive - время жизни изображения в циклах отрисовки.
	changeX - скорость изменения координаты X изображения в пикселях в цикл отрисовки.
	changeY - скорость изменения координаты Y изображения в пикселях в цикл отрисовки.
	type - тип изображения, пока ни на что не влияет.
	Пример: addImageToFactoryTemporaryImage("monsters", 4, "web", 1, getCoordMonsterX(-1) + 4, getCoordMonsterY(-1) + 0, 2*(16*6/speedattack - noa) + 4, 0, 0, "web")

addPackImagesToFactoryTemporaryImage(pack, number, state, coordX, coordY, timeLive, changeX, changeY, numberofframes, type, isAnimated) - добавить в фабрику временных изображений пакет изображений.
	pack - название пака изображений, поддерживается только "monsters".
	number - номер монстра.
	state - состояние монстра.
	coordX - координата по X.
	coordY - координата по Y.
	timeLive - время жизни изображения в циклах отрисовки.
	changeX - скорость изменения координаты X изображения в пикселях в цикл отрисовки.
	changeY - скорость изменения координаты Y изображения в пикселях в цикл отрисовки.
	numberofframes - количество фреймов для анимации
	type - тип изображения, пока ни на что не влияет.
	isAnimated - анимировать ли созданное изображение.

changeNextLevel() - сменить уровень на следующий.

playSound(soundname, new_sound = true, restart = false, is_loop = false, offset_ms = 0) - начать играть звук.
	soundname - название звука.
	new_sound - сделать ли звук новым (если нет, то если он играет, он либо начнётся заново в зависимости
			от параметра restart, либо ничего не произойдёт).
	restart - начать ли звук заново, если он играет. Работает только при new_sound = false.
	is_loop - зациклить ли звук.
	offset_ms - отсечение на начало звука.
	Возвращает ключ играемого звука (после завершения проигрывания ключ становится недействительным).
	Пример: playSound("boom", 0, 1, 1, 2) - начать играть звук boom не как новый, заново, зациклить, с отсечение 2.

stopSound(soundname) - остановить проигрывание звука.
	soundname - название звука.
	Возвращает 1, если успешно, 0 - иначе.
	Пример: stopSound("boom") - остановить звук.

pauseSound(soundname) - приостановить проигрывание звука.
	soundname - название звука.
	Возвращает 1, если успешно, 0 - иначе.
	Пример: pauseSound("boom") - приостановить звук.

playMusic(soundname, restart = false, is_loop = false, offset_ms = 0) - начать играть звук.
	soundname - название музыки.
	restart - начать ли музыку заново, если она играет.
	is_loop - зациклить ли музыку.
	offset_ms - отсечение на начало музыки.
	Возвращает 1, если успешно, 0 - иначе.
	Пример: playMusic("boom", 1, 1, 2) - начать играть звук boom заново, зациклить, с отсечение 2.

stopMusic(soundname) - остановить проигрывание музыки.
	soundname - название музыки.
	Возвращает 1, если успешно, 0 - иначе.
	Пример: stopMusic("boom") - остановить музыку.

pauseMusic(soundname) - приостановить проигрывание музыки.
	soundname - название музыки.
	Возвращает 1, если успешно, 0 - иначе.
	Пример: pauseMusic("boom") - приостановить музыку.

stopAllMusic() - остановить проигрывание всей музыки.
	Пример: stopAllMusic() - остановить всю музыку.